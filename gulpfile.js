const { src, dest, series } = require('gulp');
const jshint = require('gulp-jshint');
const clean = require('gulp-clean');
const validator = require('gulp-html');
const htmlmin = require('gulp-htmlmin');
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');
const replace = require('gulp-replace');

const config = {
    src: 'src/',
    dist: 'dist/'
}

// js 语法检查
function jsHint() {
    return src(config.src + '/js/**/*.js').pipe(jshint())
        .pipe(jshint.reporter('default'));
}

// 清空dist文件
function clear() {
    return src(config.dist, { read: false, allowEmpty: true }).pipe(clean());
}

// 处理html文件
function html() {
    const options = {
        includeAutoGeneratedTags: true,
        removeAttributeQuotes: true,
        removeComments: true,
        removeRedundantAttributes: true,
        removeScriptTypeAttributes: true,
        removeStyleLinkTypeAttributes: true,
        sortClassName: true,
        useShortDoctype: true,
        collapseWhitespace: true
    };
    return src('src/index.html', { allowEmpty: true })
        .pipe(validator({ html: true }))
        .pipe(htmlmin(options))
        .pipe(dest(config.dist));
}

//复制图片
function copyImg() {
    return src(config.src + '/imgs/**/*')
        .pipe(dest(config.dist + 'img'))
}

//复制css
function copyCss() {
    return src(config.src + '/css/**/*')
        .pipe(dest(config.dist + 'css'))
}

function minifyjs() {
    return src(config.src + 'js/**/*.js')
        .pipe(concat('build.js'))//合成到一个js
        .pipe(dest(config.dist + 'js'))//输出到js目录
        .pipe(uglify())//压缩js到一行
        .pipe(concat('build.min.js'))//压缩后的js
        .pipe(dest(config.dist + 'js'));//输出到js目录
}

//替换js
function replacejs() {
    return src([config.dist + '*.html'])
        .pipe(replace('index.js', 'build.min.js'))
        .pipe(dest(config.dist));
}

exports.dev = series(jsHint);
exports.build = series(clear, copyCss, copyImg, minifyjs, html, replacejs);